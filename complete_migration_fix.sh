#!/bin/bash

# Complete Django Migration Fix Script for Linux Server
# This script safely fixes the elearning.0005_remove_elearningsession_user_and_more migration

echo "=== Django Migration Fix Script ==="
echo "Starting migration fix process..."

# Step 1: Create backup
echo "Step 1: Creating backup of current migration file..."
cp elearning/migrations/0005_remove_elearningsession_user_and_more.py elearning/migrations/0005_remove_elearningsession_user_and_more.py.backup
echo "✓ Backup created"

# Step 2: Create the fixed migration content
echo "Step 2: Creating fixed migration file..."
cat > elearning/migrations/0005_remove_elearningsession_user_and_more.py << 'EOF'
# Generated by Django 4.2.5 on 2024-11-07 10:20

from django.db import migrations
from django.db import connection

def check_table_exists(table_name):
    """Check if a table exists in the database"""
    with connection.cursor() as cursor:
        cursor.execute("""
            SELECT COUNT(*)
            FROM information_schema.tables 
            WHERE table_schema = DATABASE() 
            AND table_name = %s
        """, [table_name])
        return cursor.fetchone()[0] > 0

def check_column_exists(table_name, column_name):
    """Check if a column exists in a table"""
    with connection.cursor() as cursor:
        cursor.execute("""
            SELECT COUNT(*)
            FROM information_schema.columns 
            WHERE table_schema = DATABASE() 
            AND table_name = %s 
            AND column_name = %s
        """, [table_name, column_name])
        return cursor.fetchone()[0] > 0

def safe_remove_field(apps, schema_editor):
    """Safely remove fields only if they exist"""
    print("Checking and removing elearningsession fields...")
    
    # Check if elearningsession table exists
    if not check_table_exists('elearning_elearningsession'):
        print("Table elearning_elearningsession does not exist, skipping field removal")
        return
    
    # Remove user field if it exists
    if check_column_exists('elearning_elearningsession', 'user_id'):
        print("Removing user field from elearningsession...")
        with schema_editor.connection.cursor() as cursor:
            cursor.execute("ALTER TABLE elearning_elearningsession DROP COLUMN user_id")
        print("✓ user field removed")
    else:
        print("user field does not exist, skipping")
    
    # Remove whatsapp field if it exists
    if check_column_exists('elearning_elearningsession', 'whatsapp'):
        print("Removing whatsapp field from elearningsession...")
        with schema_editor.connection.cursor() as cursor:
            cursor.execute("ALTER TABLE elearning_elearningsession DROP COLUMN whatsapp")
        print("✓ whatsapp field removed")
    else:
        print("whatsapp field does not exist, skipping")

def safe_delete_model(apps, schema_editor):
    """Safely delete model only if it exists"""
    print("Checking and deleting userpersonalinfo model...")
    
    # Check if userpersonalinfo table exists
    if check_table_exists('elearning_userpersonalinfo'):
        print("Deleting userpersonalinfo table...")
        with schema_editor.connection.cursor() as cursor:
            cursor.execute("DROP TABLE elearning_userpersonalinfo")
        print("✓ userpersonalinfo table deleted")
    else:
        print("userpersonalinfo table does not exist, skipping deletion")

def reverse_safe_remove_field(apps, schema_editor):
    """Reverse operation - add fields back if needed"""
    print("Reverse operation: This migration cannot be reversed automatically")
    print("Manual intervention required to restore fields")

def reverse_safe_delete_model(apps, schema_editor):
    """Reverse operation - recreate model if needed"""
    print("Reverse operation: This migration cannot be reversed automatically")
    print("Manual intervention required to restore table")

class Migration(migrations.Migration):

    dependencies = [
        ('elearning', '0004_elearningsession_whatsapp'),
    ]

    operations = [
        migrations.RunPython(
            safe_remove_field,
            reverse_safe_remove_field,
            hints={'elearning_elearningsession': 'field_removal'}
        ),
        migrations.RunPython(
            safe_delete_model,
            reverse_safe_delete_model,
            hints={'elearning_userpersonalinfo': 'model_deletion'}
        ),
    ]
EOF

echo "✓ Fixed migration file created"

# Step 3: Show the differences
echo "Step 3: Showing differences between old and new migration..."
echo "--- OLD MIGRATION (backup) ---"
head -20 elearning/migrations/0005_remove_elearningsession_user_and_more.py.backup
echo ""
echo "--- NEW MIGRATION (fixed) ---"
head -20 elearning/migrations/0005_remove_elearningsession_user_and_more.py

# Step 4: Check current migration status
echo "Step 4: Checking current migration status..."
python manage.py showmigrations elearning

# Step 5: Try to fake-apply the migration
echo "Step 5: Attempting to fake-apply the problematic migration..."
python manage.py migrate elearning 0005 --fake

# Step 6: Run migrations normally
echo "Step 6: Running all pending migrations..."
python manage.py migrate

# Step 7: Verify the fix
echo "Step 7: Verifying migration status..."
python manage.py showmigrations elearning

# Step 8: Check for any remaining issues
echo "Step 8: Checking for any remaining migration issues..."
python manage.py migrate --check

echo "=== Migration Fix Complete ==="
echo "If you see any errors above, please review them carefully."
echo "The backup file is saved as: elearning/migrations/0005_remove_elearningsession_user_and_more.py.backup"
echo ""
echo "Next steps:"
echo "1. Test your application to ensure everything works"
echo "2. Check the Django admin and elearning functionality"
echo "3. If issues persist, you can restore the backup and try alternative approaches"
